{"version":3,"sources":["webpack:///./src/components/Search/PublicationsSearch.js","webpack:///./src/templates/publications-search-template.js"],"names":["PublicationsSearch","state","isLoading","searchResults","search","isError","indexByTitle","indexByJournalTypes","indexByPubmed","indexByAuthors","indexByGroups","indexBy","termFrequency","removeStopWords","searchQuery","selectedStrategy","selectedSanitizer","rebuildIndex","publications","props","dataToSearch","JsSearch","tokenizer","indexStrategy","sanitizer","searchIndex","addIndex","searchPublications","forEach","publication","publicationObj","slug","node","fields","groups","frontmatter","categories","date","dateofacceptance","description","impactfactor","journal","journaltypes","pubmed","authors","tags","title","url","push","addDocuments","setState","searchData","e","queryResult","target","value","handleSubmit","preventDefault","getDerivedStateFromProps","nextProps","prevState","engine","TitleIndex","JournalTypesIndex","PubmedIndex","AuthorsIndex","GroupsIndex","SearchByTerm","searchSanitizer","componentDidMount","a","this","render","queryResults","style","margin","onSubmit","htmlFor","paddingRight","fontWeight","class","type","id","onChange","aria-describedby","placeholder","role","fontSize","textDecoration","fontStyle","color","length","marginTop","marginBottom","textDecorationLine","map","item","key","textTransform","dateTime","moment","format","href","lineHeight","author","searchAuthor","replace","toLowerCase","Badge","className","pill","variant","group","searchGroup","borderBottom","Component","SearchTemplate","publicationData","pageContext","allPublications","options","useSiteMetadata","subtitle","Layout","Sidebar","Page","edges"],"mappings":"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","file":"component---src-templates-publications-search-template-js-2a38bb54f3bc7653a2b9.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport * as JsSearch from \"js-search\"\r\nimport { StaticQuery, graphql } from 'gatsby';\r\nimport ReactPaginate from 'react-paginate';\r\nimport moment from 'moment';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport paginate from 'paginate-array';\r\nimport ScrollUpButton from \"react-scroll-up-button\"; //Add this line Here\r\n\r\nclass PublicationsSearch extends Component {\r\n  state = {\r\n    isLoading: true,\r\n    searchResults: [],\r\n    search: null,\r\n    isError: false,\r\n    indexByTitle: false,\r\n    indexByJournalTypes: false,\r\n    indexByPubmed: false,\r\n    indexByAuthors: false,\r\n    indexByGroups: false,\r\n    indexBy: false,\r\n    termFrequency: true,\r\n    removeStopWords: true,\r\n    searchQuery: \"\",\r\n    selectedStrategy: \"\",\r\n    selectedSanitizer: \"\",\r\n  }\r\n  /**\r\n   * React lifecycle method that will inject the data into the state.\r\n   */\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (prevState.search === null) {\r\n      const { engine } = nextProps\r\n      return {\r\n        indexByTitle: engine.TitleIndex,\r\n        indexByJournalTypes: engine.JournalTypesIndex,\r\n        indexByPubmed: engine.PubmedIndex,\r\n        indexByAuthors: engine.AuthorsIndex,\r\n        indexByGroups: engine.GroupsIndex,\r\n        termFrequency: engine.SearchByTerm,\r\n        selectedSanitizer: engine.searchSanitizer,\r\n        selectedStrategy: engine.indexStrategy,\r\n      }\r\n    }\r\n    return null\r\n  }\r\n  async componentDidMount() {\r\n    this.rebuildIndex()\r\n  }\r\n\r\n  /**\r\n   * rebuilds the overall index based on the options\r\n   */\r\n  rebuildIndex = () => {\r\n    const {\r\n      selectedStrategy,\r\n      selectedSanitizer,\r\n      removeStopWords,\r\n      termFrequency\r\n    } = this.state\r\n    const { publications } = this.props\r\n\r\n    const dataToSearch = new JsSearch.Search(\"title\")\r\n\r\n    if (removeStopWords) {\r\n      dataToSearch.tokenizer = new JsSearch.StopWordsTokenizer(\r\n        new JsSearch.SimpleTokenizer()\r\n      )\r\n    }\r\n    /**\r\n     * defines an indexing strategy for the data\r\n     * read more about it here https://github.com/bvaughn/js-search#configuring-the-index-strategy\r\n     */\r\n\r\n      dataToSearch.indexStrategy = new JsSearch.AllSubstringsIndexStrategy()\r\n    \r\n    /**\r\n     * defines the sanitizer for the search\r\n     * to prevent some of the words from being excluded\r\n     */\r\n    selectedSanitizer === \"Case Sensitive\"\r\n      ? (dataToSearch.sanitizer = new JsSearch.CaseSensitiveSanitizer())\r\n      : (dataToSearch.sanitizer = new JsSearch.LowerCaseSanitizer())\r\n    termFrequency === true\r\n      ? (dataToSearch.searchIndex = new JsSearch.TfIdfSearchIndex(\"title\"))\r\n      : (dataToSearch.searchIndex = new JsSearch.UnorderedSearchIndex())\r\n\r\n    // sets the index attribute for the data\r\n    dataToSearch.addIndex(\"title\");\r\n    dataToSearch.addIndex(\"groups\");\r\n    dataToSearch.addIndex(\"authors\");\r\n    dataToSearch.addIndex(\"pubmed\");\r\n    dataToSearch.addIndex(\"description\");\r\n\r\n\r\n    let searchPublications = [];\r\n    publications.forEach((publication) => {\r\n      let publicationObj = {\r\n        slug: publication.node.fields.slug,\r\n        groups: publication.node.frontmatter.categories,\r\n        date: publication.node.frontmatter.date,\r\n        dateofacceptance: publication.node.frontmatter.dateofacceptance,\r\n        description: publication.node.frontmatter.description,\r\n        impactfactor: publication.node.frontmatter.impactfactor,\r\n        journal: publication.node.frontmatter.journal,\r\n        journaltypes: publication.node.frontmatter.journaltypes,\r\n        pubmed: publication.node.frontmatter.pubmed,\r\n        authors: publication.node.frontmatter.tags,\r\n        title: publication.node.frontmatter.title,\r\n        url: publication.node.frontmatter.url\r\n      }\r\n\r\n      searchPublications.push(publicationObj);\r\n    });\r\n\r\n\r\n    dataToSearch.addDocuments(searchPublications) // adds the data to be searched\r\n\r\n    this.setState({ search: dataToSearch, isLoading: false })\r\n  }\r\n  /**\r\n   * handles the input change and perform a search with js-search\r\n   * in which the results will be added to the state\r\n   */\r\n  searchData = e => {\r\n    const { search } = this.state\r\n    const queryResult = search.search(e.target.value)\r\n    this.setState({ searchQuery: e.target.value, searchResults: queryResult })\r\n  }\r\n  handleSubmit = e => {\r\n    e.preventDefault()\r\n  }\r\n  render() {\r\n    const { searchResults, searchQuery } = this.state\r\n    const { publications } = this.props\r\n    const queryResults = searchResults;\r\n    return (\r\n      <div>\r\n        <div style={{ margin: \"0 auto\" }}>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <div style={{ margin: \"0 auto\" }}>\r\n              <label htmlFor=\"Search\" style={{ paddingRight: \"10px\" }}>\r\n                <span style={{fontWeight: 'bold'}}>SEARCH: </span><br />\r\n              </label>\r\n              <div class=\"form-group\">\r\n                <input type=\"search\" value={searchQuery}\r\n                  id=\"Search\"\r\n                  onChange={this.searchData} \r\n                  class=\"form-control-lg\" \r\n                  aria-describedby=\"publicationsHelp\" \r\n                  placeholder=\" Enter search field\" />\r\n              </div>\r\n            </div>\r\n          </form>\r\n          <div>\r\n          <div class=\"alert alert-primary\" role=\"alert\">\r\n          <span style={{fontSize: '12px', fontWeight: 'normal'}}> Please enter <span style={{fontWeight: 'bold'}}>Author's surname and initials</span> or <span style={{fontWeight: 'bold'}}>Group Name</span> or <span style={{fontWeight: 'bold'}}> Keywords</span> \r\n          <br /> Example: <span style={{textDecoration: 'underline'}}>Eisenhaber F</span> OR <span style={{textDecoration: 'underline'}}>Gene Function Prediction</span> OR <span style={{textDecoration: 'underline'}}>Metabolic</span></span>\r\n          </div>\r\n          \r\n          <span style={{fontStyle: 'italic', fontSize: '12px', color: '#990000'}}>Number of returned articles: \r\n            {queryResults.length}\r\n        </span>\r\n            {queryResults.length > 0 && <h1 style={{ fontSize: '20px', marginTop: '5%', marginBottom: '2%', fontWeight: 'bold', textDecorationLine: 'underline'}}>Publication(s)</h1>}\r\n              \r\n                  {queryResults.map(item => {\r\n                    return (\r\n                        <div key={`row_${item.title}`}>\r\n                        <span style={{ fontSize: \"12px\", fontWeight: \"bold\", color: '#000000', textTransform: 'uppercase'}}>\r\n                            <time dateTime={moment(item.date).format('MMMM D, YYYY')}>\r\n                                {moment(item.date).format('D MMMM YYYY')}\r\n                            </time>\r\n                        </span>\r\n                        <br />\r\n                        <span style={{ fontSize: \"18px\", fontWeight: \"bold\"}}>\r\n                            <a target=\"_blank\" style={{color: '#003399'}} href={`${item.slug}`}>{item.title}</a>\r\n                        </span>\r\n                        <br />\r\n                        <p><span style={{ fontSize: \"14px\", lineHeight: \"1px\"}}>{item.description}</span></p>\r\n                        <span style={{ fontSize: \"16px\"}}> Authors: \r\n                        {\r\n                            (item.authors).map(author => {\r\n                                var searchAuthor = author.replace(/\\s+/g, '-').toLowerCase();\r\n                                return(\r\n                                    <Badge className=\"badge-author-group\" pill variant=\"primary\">\r\n                                    <a target=\"_blank\" style={{color: '#ffffff', fontWeight: \"normal\"}} href={`/author/${searchAuthor}`}>{author}</a>\r\n                                    </Badge>\r\n                                )  \r\n                            })\r\n                        }\r\n                        </span>\r\n                        <br />\r\n                        <span style={{ fontSize: \"16px\"}}> Groups:\r\n                        {\r\n                            (item.groups).map(group => {\r\n                                var searchGroup = group.replace(/\\s+/g, '-').toLowerCase();\r\n                                return(\r\n                                    <Badge className=\"badge-author-group\" pill variant=\"danger\">\r\n                                        <a target=\"_blank\" style={{color: '#ffffff', fontWeight: \"normal\"}} href={`/group/${searchGroup}`}>{group}</a>\r\n                                    </Badge>\r\n                                )  \r\n                            })\r\n                        }\r\n                        </span>\r\n                        <div style={{borderBottom: '1px solid #D3D3D3', marginTop: '5%', marginBottom: '5%'}}></div>\r\n                    </div>\r\n                    )\r\n                  })}\r\n                   {/* {queryResults.length > 0 && \r\n                        <ReactPaginate\r\n                            previousLabel={'← Previous'}\r\n                            nextLabel={'Next →'}\r\n                            breakLabel={<span className=\"gap\">...</span>}\r\n                            breakClassName={'break-me'}\r\n                            pageCount={this.state.pageCount}\r\n                            marginPagesDisplayed={2}\r\n                            pageRangeDisplayed={2}\r\n                            onPageChange={this.handlePageClick}\r\n                            containerClassName={'pagination'}\r\n                            subContainerClassName={'pages pagination'}\r\n                            previousLinkClassName={\"previous_page\"}\r\n                            nextLinkClassName={\"next_page\"}\r\n                            disabledClassName={\"disabled\"}\r\n                            activeClassName={\"active\"}\r\n                        />\r\n                    } */}\r\n            </div>\r\n          </div>\r\n          <ScrollUpButton />  \r\n        </div>\r\n    )\r\n  }\r\n}\r\nexport default PublicationsSearch","import React from \"react\"\r\nimport Layout from '../components/Layout';\r\nimport Sidebar from '../components/Sidebar';\r\nimport Page from '../components/Page';\r\nimport PublicationsSearch from \"../components/Search/PublicationsSearch\"\r\nimport { useSiteMetadata } from '../hooks';\r\n\r\nconst SearchTemplate = props => {\r\n  const { pageContext } = props\r\n  const { publicationData } = pageContext\r\n  const { allPublications, options } = publicationData\r\n  const { title, subtitle } = useSiteMetadata();\r\n\r\n  return (\r\n    <Layout title={`BII Publications - ${title}`} description={subtitle}>\r\n      <Sidebar />\r\n        <Page title=\"Search Publications\">\r\n          <PublicationsSearch publications={allPublications.edges} engine={options} />\r\n        </Page>\r\n    </Layout>\r\n  )\r\n}\r\nexport default SearchTemplate"],"sourceRoot":""}